// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: scraper.sql

package database

import (
	"context"
	"time"
)

const generateNextFeedsToFetch = `-- name: GenerateNextFeedsToFetch :many
select id, name, url from feeds
where last_fetched_at is null or last_fetched_at < now() - interval '1 day'
order by last_fetched_at desc
`

type GenerateNextFeedsToFetchRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) GenerateNextFeedsToFetch(ctx context.Context) ([]GenerateNextFeedsToFetchRow, error) {
	rows, err := q.db.Query(ctx, generateNextFeedsToFetch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GenerateNextFeedsToFetchRow
	for rows.Next() {
		var i GenerateNextFeedsToFetchRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
update feeds
set last_fetched_at=$1, updated_at=$2
where id in ($3)
`

type MarkFeedFetchedParams struct {
	LastFetchedAt time.Time `json:"last_fetched_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	ID            int64     `json:"id"`
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.Exec(ctx, markFeedFetched, arg.LastFetchedAt, arg.UpdatedAt, arg.ID)
	return err
}
