// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: posts.sql

package database

import (
	"context"
	"time"
)

const countPosts = `-- name: CountPosts :one
select count(*) from posts
where (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1) or $1 = '')
`

func (q *Queries) CountPosts(ctx context.Context, plaintoTsquery string) (int64, error) {
	row := q.db.QueryRow(ctx, countPosts, plaintoTsquery)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :exec
insert into posts (feed_id, title, url, description, published_at)
values ($1, $2, $3, $4, $5)
`

type CreatePostParams struct {
	FeedID      int64     `json:"feed_id"`
	Title       string    `json:"title"`
	Url         string    `json:"url"`
	Description string    `json:"description"`
	PublishedAt time.Time `json:"published_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.Exec(ctx, createPost,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
	)
	return err
}

const getPostsFollowedByUser = `-- name: GetPostsFollowedByUser :many
select p.id, p.feed_id, p.created_at, p.updated_at, p.title, p.url, p.description, p.published_at, p.image_id from posts p 
join feed_follows fw on fw.feed_id=p.feed_id
where fw.user_id = $1
order by p.published_at desc
`

func (q *Queries) GetPostsFollowedByUser(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsFollowedByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
select p.id, f.name as feed_name, p.created_at, p.updated_at, p.title, p.url, p.description, p.published_at
from posts p
join feeds f on p.feed_id=f.id
where (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1) or $1 = '')
order by published_at desc
limit $2 offset $3
`

type ListPostsParams struct {
	PlaintoTsquery string `json:"plainto_tsquery"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

type ListPostsRow struct {
	ID          int64     `json:"id"`
	FeedName    string    `json:"feed_name"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Title       string    `json:"title"`
	Url         string    `json:"url"`
	Description string    `json:"description"`
	PublishedAt time.Time `json:"published_at"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error) {
	rows, err := q.db.Query(ctx, listPosts, arg.PlaintoTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
