// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: feed_follows.sql

package database

import (
	"context"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
insert into feed_follows(user_id, feed_id)
values ($1, $2)
returning feed_id, user_id, created_at, updated_at
`

type CreateFeedFollowParams struct {
	UserID int64 `json:"user_id"`
	FeedID int64 `json:"feed_id"`
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRow(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
delete from feed_follows
where user_id=$1 and feed_id=$2
`

type DeleteFeedFollowParams struct {
	UserID int64 `json:"user_id"`
	FeedID int64 `json:"feed_id"`
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.Exec(ctx, deleteFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const listFeedFollow = `-- name: ListFeedFollow :many
select feed_id, user_id, created_at, updated_at from feed_follows
`

func (q *Queries) ListFeedFollow(ctx context.Context) ([]FeedFollow, error) {
	rows, err := q.db.Query(ctx, listFeedFollow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.FeedID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
